scalar Date

enum TaskState {
  backlog,
  todo,
  progress,
  complete
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
}

type Project {
  id: ID!
  name: String
  tasks(input: SearchTasksInput): [Task!]!
  taskCount(input: SearchTasksInput): Int!
}

type Task {
  id: ID!
  name: String
  status: TaskState!
  project: Project
  sprints: [Sprint!]!
}

type Sprint {
  id: ID!
  startDate: Date!
  endDate: Date!
  tasks(input: SearchTasksInput): [Task!]!
  taskCount(input: SearchTasksInput): Int!
}

input LoginInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  password: String
}

input CreateProjectInput {
  name: String
}

input UpdateProjectInput {
  id: ID!
  name: String
}

input SearchTasksInput {
  status: [TaskState!]
}

input CreateTaskInput {
  name: String
  status: TaskState
  project: ID
}

input UpdateTaskInput {
  id: ID!
  name: String
  status: TaskState
  project: ID
}

input CreateSprintInput {
  startDate: Date!
  endDate: Date!
}

input UpdateSprintInput {
  id: ID!
  startDate: Date
  endDate: Date
}

input AddToSprintInput {
  sprint: ID!
  task: ID!
}

input RemoveFromSprintInput {
  sprint: ID!
  task: ID!
}

type Query {
  user: User
  projects: [Project!]!
  project(id: ID!): Project
  tasks(input: SearchTasksInput): [Task!]!
  taskCount(input: SearchTasksInput): Int!
  task(id: ID!): Task
  sprints: [Sprint!]!
  sprint(id: ID!): Sprint
}

type Mutation {
  login(input: LoginInput!): User
  logout: Boolean
  updateUser(input: UpdateUserInput!): User
  createProject(input: CreateProjectInput): Project!
  updateProject(input: UpdateProjectInput!): Project
  createTask(input: CreateTaskInput): Task!
  updateTask(input: UpdateTaskInput!): Task
  createSprint(input: CreateSprintInput): Sprint!
  updateSprint(input: UpdateSprintInput!): Sprint
  addToSprint(input: AddToSprintInput!): Sprint
  removeFromSprint(input: RemoveFromSprintInput!): Sprint
}